'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AutoBind;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function AutoBind() {
  var pattern = arguments.length <= 0 || arguments[0] === undefined ? /.*/ : arguments[0];
  var base = arguments.length <= 1 || arguments[1] === undefined ? Object : arguments[1];

  return function (_base) {
    _inherits(AutoBind, _base);

    function AutoBind() {
      _classCallCheck(this, AutoBind);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(AutoBind).call(this));

      var cls = _this.constructor;
      var methods, methodName;
      while (cls !== AutoBind) {
        methods = Object.getOwnPropertyNames(cls.prototype);
        for (var i in methods) {
          methodName = methods[i];
          if (methodName.match(pattern) !== null && typeof _this[methodName] === 'function') {
            _this[methodName] = _this[methodName].bind(_this);
          }
        }
        if (cls === Object) {
          break;
        } else {
          cls = cls.__proto__;
        }
      }
      return _this;
    }

    return AutoBind;
  }(base);
}
module.exports = exports['default'];

